<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.1"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>214972</bug_id>
          
          <creation_ts>2008-01-10 18:09:00 -0500</creation_ts>
          <short_desc>[1.5][compiler] Wrong Signature for methods inside InnerTypes with generics .</short_desc>
          <delta_ts>2008-02-04 12:15:48 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.3.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andrey Markovytch">A.Markovytch</reporter>
          <assigned_to name="Philipe Mulet">philippe_mulet</assigned_to>
          <cc>david_audel</cc>
    
    <cc>jerome_lanneluc</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      <flag name="pmc_approved"
          id="5127"
          type_id="2"
          status="+"
          setter="philippe_mulet"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1129362</commentid>
    <comment_count>0</comment_count>
    <who name="Andrey Markovytch">A.Markovytch</who>
    <bug_when>2008-01-10 18:09:16 -0500</bug_when>
    <thetext>Please try to compile the attached class . 
Signatuge generated for BinnerInner.$new$() method is :

&lt;J:Ljava/lang/Object;&gt;()LB$Binner$BinnerInner&lt;TJ;&gt;;

while it should be (as generated by sun&apos;s javac) :

&lt;J:Ljava/lang/Object;&gt;()LB&lt;TU;&gt;.Binner.BinnerInner&lt;TJ;&gt;;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1129364</commentid>
    <comment_count>1</comment_count>
      <attachid>86625</attachid>
    <who name="Andrey Markovytch">A.Markovytch</who>
    <bug_when>2008-01-10 18:12:00 -0500</bug_when>
    <thetext>Created attachment 86625
Attached Class</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1131385</commentid>
    <comment_count>2</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2008-01-15 07:43:56 -0500</bug_when>
    <thetext>Reproduced. 
Problem comes from ParameterizedTypeBinding#genericTypeSignature().
Should be:

	public char[] genericTypeSignature() {
		if (this.genericTypeSignature == null) {
			if ((this.modifiers &amp; ExtraCompilerModifiers.AccGenericSignature) == 0) {
		    	this.genericTypeSignature = this.type.signature();
			} else {
			    StringBuffer sig = new StringBuffer(10);
			    if (this.isMemberType()) {
			    	ReferenceBinding enclosing = enclosingType();
					char[] typeSig = enclosing.genericTypeSignature();
					sig.append(typeSig, 0, typeSig.length-1);// copy all but trailing semicolon
			    	if ((enclosing.modifiers &amp; ExtraCompilerModifiers.AccGenericSignature) != 0) {
			    		sig.append(&apos;.&apos;);
			    	} else {
			    		sig.append(&apos;$&apos;);
			    	}
			    	sig.append(this.sourceName());
			    } else {
			    	char[] typeSig = this.type.signature();
					sig.append(typeSig, 0, typeSig.length-1);// copy all but trailing semicolon
		    	}
				if (this.arguments != null) {
				    sig.append(&apos;&lt;&apos;);
				    for (int i = 0, length = this.arguments.length; i &lt; length; i++) {
				        sig.append(this.arguments[i].genericTypeSignature());
				    }
				    sig.append(&apos;&gt;&apos;);
				}
				sig.append(&apos;;&apos;);
				int sigLength = sig.length();
				this.genericTypeSignature = new char[sigLength];
				sig.getChars(0, sigLength, this.genericTypeSignature, 0);						
			}
		}
		return this.genericTypeSignature;
	}

Same fix needed for RawTypeBinding.

Added GenericTypeTest#test12228-1231</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1131390</commentid>
    <comment_count>3</comment_count>
      <attachid>86931</attachid>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2008-01-15 07:55:48 -0500</bug_when>
    <thetext>Created attachment 86931
Proposed patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1131447</commentid>
    <comment_count>4</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2008-01-15 09:23:09 -0500</bug_when>
    <thetext>Released for 3.4M5.
Fixed</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1131454</commentid>
    <comment_count>5</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2008-01-15 09:34:30 -0500</bug_when>
    <thetext>Jerome - I believe we should backport the fix for 3.3.2. It is a case where we produce corrupted classfiles as it is, and the fix is quite simple.
Corrupted classfiles may have a long life cycle, and thus avoiding them is rather a feature.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1131474</commentid>
    <comment_count>6</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2008-01-15 09:55:21 -0500</bug_when>
    <thetext>Andrey - what are the consequences for you of this bad signature in the classfile ? </thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1131477</commentid>
    <comment_count>7</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-01-15 09:57:22 -0500</bug_when>
    <thetext>I agree that this fix should be backported to 3.3.2 since:
- any client (static analysis tools, Java indexer, VM, etc.) that reads our generated .class file may see the bogus signature 
- clients may see the problem a long time after the .class file was generated
- there is no workaround
- the fix is simple
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1131481</commentid>
    <comment_count>8</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2008-01-15 10:01:33 -0500</bug_when>
    <thetext>Released for 3.3.2.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1137553</commentid>
    <comment_count>9</comment_count>
    <who name="David Audel">david_audel</who>
    <bug_when>2008-01-24 05:14:30 -0500</bug_when>
    <thetext>Verified for 3.3.2 using build M20080123-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1148930</commentid>
    <comment_count>10</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-02-04 12:15:48 -0500</bug_when>
    <thetext>Verified for 3.4M5 using I20080204-0010</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>86625</attachid>
            <date>2008-01-10 18:12:00 -0500</date>
            <delta_ts>2008-01-10 18:12:00 -0500</delta_ts>
            <desc>Attached Class</desc>
            <filename>B.java</filename>
            <type>application/octet-stream</type>
            <size>260</size>
            <attacher name="Andrey Markovytch">A.Markovytch</attacher>
            
              <data encoding="base64">cHVibGljIGNsYXNzIEI8VSBleHRlbmRzIENsYXNzPiB7ICBwdWJsaWMgPFk+IEIoWSBiMSxVIGIy
KSB7fQkJCQkJDQoJCQkJCQkgDQoJCXB1YmxpYyBjbGFzcyBCaW5uZXIgew0KCQ0KCQkJcHVibGlj
IGNsYXNzIEJpbm5lcklubmVyPEo+IHsNCgkJCQkJCQkNCgkJCQkJcHVibGljIDxKPiBCaW5uZXJJ
bm5lcjxKPiAkbmV3JCgpIHsNCgkJCQkJCQlyZXR1cm4gbmV3IEJpbm5lcklubmVyPEo+KCk7DQoJ
CQkJCX0NCgkJCX0NCgkJCQkJDQoNCgkJfQ0KDQp9DQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>86931</attachid>
            <date>2008-01-15 07:55:00 -0500</date>
            <delta_ts>2008-01-15 07:55:48 -0500</delta_ts>
            <desc>Proposed patch</desc>
            <filename>214972.txt</filename>
            <type>text/plain</type>
            <size>13329</size>
            <attacher name="Philipe Mulet">philippe_mulet</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1BhcmFtZXRlcml6ZWRUeXBlQmluZGluZy5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2
c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBlQmluZGluZy5qYXZh
LHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS45OQ0KZGlmZiAtdSAtcjEuOTkgUGFyYW1ldGVyaXpl
ZFR5cGVCaW5kaW5nLmphdmENCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBlQmluZGluZy5qYXZhCTkgT2N0IDIwMDcg
MjA6MzA6MTUgLTAwMDAJMS45OQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nLmphdmEJMTUgSmFuIDIw
MDggMTI6NTU6MTkgLTAwMDANCkBAIC0zNzIsMTAgKzM3Miw5IEBADQogCQkJICAgIFN0cmluZ0J1
ZmZlciBzaWcgPSBuZXcgU3RyaW5nQnVmZmVyKDEwKTsNCiAJCQkgICAgaWYgKHRoaXMuaXNNZW1i
ZXJUeXBlKCkpIHsNCiAJCQkgICAgCVJlZmVyZW5jZUJpbmRpbmcgZW5jbG9zaW5nID0gZW5jbG9z
aW5nVHlwZSgpOw0KLQkJCSAgICAJYm9vbGVhbiBoYXNQYXJhbWV0ZXJpemVkRW5jbG9zaW5nID0g
ZW5jbG9zaW5nLmlzUGFyYW1ldGVyaXplZFR5cGUoKTsNCi0JCQkJCWNoYXJbXSB0eXBlU2lnID0g
aGFzUGFyYW1ldGVyaXplZEVuY2xvc2luZyA/IGVuY2xvc2luZy5nZW5lcmljVHlwZVNpZ25hdHVy
ZSgpIDogZW5jbG9zaW5nLnNpZ25hdHVyZSgpOw0KKwkJCQkJY2hhcltdIHR5cGVTaWcgPSBlbmNs
b3NpbmcuZ2VuZXJpY1R5cGVTaWduYXR1cmUoKTsNCiAJCQkJCXNpZy5hcHBlbmQodHlwZVNpZywg
MCwgdHlwZVNpZy5sZW5ndGgtMSk7Ly8gY29weSBhbGwgYnV0IHRyYWlsaW5nIHNlbWljb2xvbg0K
LQkJCSAgICAJaWYgKGhhc1BhcmFtZXRlcml6ZWRFbmNsb3NpbmcgJiYgKGVuY2xvc2luZy5tb2Rp
ZmllcnMgJiBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0dlbmVyaWNTaWduYXR1cmUpICE9IDAp
IHsNCisJCQkgICAgCWlmICgoZW5jbG9zaW5nLm1vZGlmaWVycyAmIEV4dHJhQ29tcGlsZXJNb2Rp
ZmllcnMuQWNjR2VuZXJpY1NpZ25hdHVyZSkgIT0gMCkgew0KIAkJCSAgICAJCXNpZy5hcHBlbmQo
Jy4nKTsNCiAJCQkgICAgCX0gZWxzZSB7DQogCQkJICAgIAkJc2lnLmFwcGVuZCgnJCcpOw0KSW5k
ZXg6IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmF3
VHlwZUJpbmRpbmcuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24g
MS4zNg0KZGlmZiAtdSAtcjEuMzYgUmF3VHlwZUJpbmRpbmcuamF2YQ0KLS0tIGNvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJpbmRpbmcuamF2
YQk3IEphbiAyMDA4IDE0OjE2OjE4IC0wMDAwCTEuMzYNCisrKyBjb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEJMTUgSmFu
IDIwMDggMTI6NTU6MTkgLTAwMDANCkBAIC04MiwxMCArODIsOSBAQA0KIAkJCSAgICBTdHJpbmdC
dWZmZXIgc2lnID0gbmV3IFN0cmluZ0J1ZmZlcigxMCk7DQogCQkJICAgIGlmICh0aGlzLmlzTWVt
YmVyVHlwZSgpKSB7DQogCQkJICAgIAlSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZyA9IGVuY2xv
c2luZ1R5cGUoKTsNCi0JCQkgICAgCWJvb2xlYW4gaGFzUGFyYW1ldGVyaXplZEVuY2xvc2luZyA9
IGVuY2xvc2luZy5pc1BhcmFtZXRlcml6ZWRUeXBlKCk7DQotCQkJCQljaGFyW10gdHlwZVNpZyA9
IGhhc1BhcmFtZXRlcml6ZWRFbmNsb3NpbmcgPyBlbmNsb3NpbmcuZ2VuZXJpY1R5cGVTaWduYXR1
cmUoKSA6IGVuY2xvc2luZy5zaWduYXR1cmUoKTsNCisJCQkJCWNoYXJbXSB0eXBlU2lnID0gZW5j
bG9zaW5nLmdlbmVyaWNUeXBlU2lnbmF0dXJlKCk7DQogCQkJCQlzaWcuYXBwZW5kKHR5cGVTaWcs
IDAsIHR5cGVTaWcubGVuZ3RoLTEpOy8vIGNvcHkgYWxsIGJ1dCB0cmFpbGluZyBzZW1pY29sb24N
Ci0JCQkgICAgCWlmIChoYXNQYXJhbWV0ZXJpemVkRW5jbG9zaW5nICYmIChlbmNsb3NpbmcubW9k
aWZpZXJzICYgRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NHZW5lcmljU2lnbmF0dXJlKSAhPSAw
KSB7DQorCQkJICAgIAlpZiAoKGVuY2xvc2luZy5tb2RpZmllcnMgJiBFeHRyYUNvbXBpbGVyTW9k
aWZpZXJzLkFjY0dlbmVyaWNTaWduYXR1cmUpICE9IDApIHsNCiAJCQkgICAgCQlzaWcuYXBwZW5k
KCcuJyk7DQogCQkJICAgIAl9IGVsc2Ugew0KIAkJCSAgICAJCXNpZy5hcHBlbmQoJyQnKTsNCiNQ
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyDQpJbmRleDogc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVzdC5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNp
b24gMS42NzYNCmRpZmYgLXUgLXIxLjY3NiBHZW5lcmljVHlwZVRlc3QuamF2YQ0KLS0tIHNyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBl
VGVzdC5qYXZhCTE4IERlYyAyMDA3IDEyOjQ0OjA2IC0wMDAwCTEuNjc2DQorKysgc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0
LmphdmEJMTUgSmFuIDIwMDggMTI6NTU6MjggLTAwMDANCkBAIC00MTAyNyw0ICs0MTAyNywyODMg
QEANCiAJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFguSXNBQnVnIHRvIFN0
cmluZ1xuIiArIA0KIAkJIi0tLS0tLS0tLS1cbiIpOw0KIH0NCitwdWJsaWMgdm9pZCB0ZXN0MTIy
NCgpIHsNCisJdGhpcy5ydW5Db25mb3JtVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJIlgu
amF2YSIsDQorCQkJImltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbjtcbiIgKyANCisJCQkiaW1w
b3J0IGphdmEudXRpbC5Db2xsZWN0aW9ucztcbiIgKyANCisJCQkicHVibGljIGNsYXNzIFgge1xu
IiArIA0KKwkJCSIJY2xhc3MgUmVxdWVzdDxSIGV4dGVuZHMgUmVxdWVzdDxSLCBWPixWPiB7fVxu
IiArIA0KKwkJCSIJY2xhc3MgUmVxdWVzdE1hcCB7XG4iICsgDQorCQkJIgkJcHVibGljIDxSIGV4
dGVuZHMgUmVxdWVzdDxSLCBXPixXPiBSIGludGVyc2VjdGlvbiAoQ29sbGVjdGlvbjxSPiBjKSB7
XG4iICsgDQorCQkJIgkJCXJldHVybiBudWxsO1xuIiArIA0KKwkJCSIJCX1cbiIgKyANCisJCQki
CX1cbiIgKyANCisJCQkiCWNsYXNzIERlbHRhUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Q8RGVsdGFS
ZXF1ZXN0LGRvdWJsZVtdPiB7fVxuIiArIA0KKwkJCSIJcHVibGljIHZvaWQgdGVzdCAoKSB7XG4i
ICsgDQorCQkJIgkJUmVxdWVzdE1hcCBtID0gbmV3IFJlcXVlc3RNYXAgKCk7XG4iICsgDQorCQkJ
IgkJQ29sbGVjdGlvbjxEZWx0YVJlcXVlc3Q+IGMgPSBDb2xsZWN0aW9ucy5zaW5nbGV0b24gKG5l
dyBEZWx0YVJlcXVlc3QgKCkpO1xuIiArIA0KKwkJCSIJCURlbHRhUmVxdWVzdCBvID0gbS5pbnRl
cnNlY3Rpb24gKGMpO1xuIiArIA0KKwkJCSIJfVxuIiArIA0KKwkJCSJ9XG4iDQorCQl9LA0KKwkJ
IiIpOw0KK30NCitwdWJsaWMgdm9pZCB0ZXN0MTIyNSgpIHsNCisJdGhpcy5ydW5Db25mb3JtVGVz
dCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJIlguamF2YSIsDQorCQkJImltcG9ydCBqYXZhLnV0
aWwuQ29sbGVjdGlvbjtcbiIgKyANCisJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArIA0K
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgDQorCQkJIiAgIHN0YXRpYyA8Qj4gdm9pZCBtKExp
c3Q8PyBzdXBlciBCPiBsaXN0LCBDb2xsZWN0aW9uPD8gc3VwZXIgQj4gY29sbCkge1xuIiArIA0K
KwkJCSIgICAgIG0obGlzdCwgY29sbCk7XG4iICsgDQorCQkJIiAgIH1cbiIgKyANCisJCQkifVxu
Ig0KKwkJfSwNCisJCSIiKTsNCit9DQorcHVibGljIHZvaWQgdGVzdDEyMjYoKSB7DQorCXRoaXMu
cnVuTmVnYXRpdmVUZXN0KA0KKwkJbmV3IFN0cmluZ1tdIHsNCisJCQkiWC5qYXZhIiwNCisJCQki
cHVibGljIGNsYXNzIFg8VD4ge1xuIiArIA0KKwkJCSIJY2xhc3MgTSB7XG4iICsgDQorCQkJIgkJ
WDxUPiBmb28oKSB7IHJldHVybiBudWxsOyB9XG4iICsgDQorCQkJIgl9XG4iICsgDQorCQkJIgl2
b2lkIGJhcihNIG0pIHtcbiIgKyANCisJCQkiCQlYPFQ+IHh0ID0gbS5mb28oKTtcbiIgKyAvLyBu
byB1bmNoZWNrZWQgd2FybmluZw0KKwkJCSIJCVpvcmsgejtcbiIgKw0KKwkJCSIJfVxuIiArIA0K
KwkJCSJ9XG4iDQorCQl9LA0KKwkJIi0tLS0tLS0tLS1cbiIgKyANCisJCSIxLiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgNylcclxuIiArIA0KKwkJIglab3JrIHo7XHJcbiIgKyANCisJCSIJXl5e
XlxuIiArIA0KKwkJIlpvcmsgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZVxuIiArIA0KKwkJ
Ii0tLS0tLS0tLS1cbiIpOw0KK30JDQorcHVibGljIHZvaWQgdGVzdDEyMjcoKSB7DQorCXRoaXMu
cnVuTmVnYXRpdmVUZXN0KA0KKwkJbmV3IFN0cmluZ1tdIHsNCisJCQkiWC5qYXZhIiwNCisJCQki
aW1wb3J0IGphdmEudXRpbC5BcnJheXM7XG4iICsgDQorCQkJInB1YmxpYyBjbGFzcyAgWCB7XG4i
ICsgDQorCQkJIgl2b2lkIGZvbygpIHtcbiIgKyANCisJCQkiCQlBcnJheXMuYXNMaXN0KFN0cmlu
Zy5jbGFzcywgSW50ZWdlci5jbGFzcyk7XG4iICsgDQorCQkJIgl9XG4iICsgDQorCQkJIglab3Jr
IHo7XG4iICsgDQorCQkJIn1cbiINCisJCX0sDQorCQkiLS0tLS0tLS0tLVxuIiArIA0KKwkJIjEu
IFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsgDQorCQkiCUFycmF5cy5hc0xpc3Qo
U3RyaW5nLmNsYXNzLCBJbnRlZ2VyLmNsYXNzKTtcbiIgKyANCisJCSIJXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgDQorCQkiVHlwZSBzYWZldHkgOiBBIGdl
bmVyaWMgYXJyYXkgb2YgQ2xhc3M8PyBleHRlbmRzIE9iamVjdCZTZXJpYWxpemFibGUmQ29tcGFy
YWJsZTw/Pj4gaXMgY3JlYXRlZCBmb3IgYSB2YXJhcmdzIHBhcmFtZXRlclxuIiArIA0KKwkJIi0t
LS0tLS0tLS1cbiIgKyANCisJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNilcbiIgKyAN
CisJCSIJWm9yayB6O1xuIiArIA0KKwkJIgleXl5eXG4iICsgDQorCQkiWm9yayBjYW5ub3QgYmUg
cmVzb2x2ZWQgdG8gYSB0eXBlXG4iICsgDQorCQkiLS0tLS0tLS0tLVxuIik7DQorfQ0KKy8vaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNDk3MiAgDQorcHVi
bGljIHZvaWQgdGVzdDEyMjgoKSB7DQorCXRoaXMucnVuQ29uZm9ybVRlc3QoDQorCQluZXcgU3Ry
aW5nW10gew0KKwkJCSJYLmphdmEiLA0KKwkJCSJwdWJsaWMgY2xhc3MgWDxVIGV4dGVuZHMgQ2xh
c3M+IHtcbiIgKyANCisJCQkiCXB1YmxpYyA8WT4gWChZIGIxLCBVIGIyKSB7XG4iICsgDQorCQkJ
Igl9XG4iICsgDQorCQkJIglwdWJsaWMgY2xhc3MgQmlubmVyIHtcbiIgKyANCisJCQkiCQlwdWJs
aWMgY2xhc3MgQmlubmVySW5uZXI8ST4ge1xuIiArIA0KKwkJCSIJCQlwdWJsaWMgPEo+IEJpbm5l
cklubmVyPEo+ICRuZXckKCkge1xuIiArIA0KKwkJCSIJCQkJcmV0dXJuIG5ldyBCaW5uZXJJbm5l
cjxKPigpO1xuIiArIA0KKwkJCSIJCQl9XG4iICsgDQorCQkJIgkJfVxuIiArIA0KKwkJCSIJfVxu
IiArIA0KKwkJCSJ9XG4iDQorCQl9LA0KKwkJIiIpOw0KKwkvLyBjaGVjayAkbmV3JCBtZXRob2Qg
Z2VuZXJpYyBzaWduYXR1cmUNCisJU3RyaW5nIGV4cGVjdGVkT3V0cHV0ID0NCisJCSIgIC8vIE1l
dGhvZCBkZXNjcmlwdG9yICMyMiAoKUxYJEJpbm5lciRCaW5uZXJJbm5lcjtcbiIgKyANCisJCSIg
IC8vIFNpZ25hdHVyZTogPEo6TGphdmEvbGFuZy9PYmplY3Q7PigpTFg8VFU7Pi5CaW5uZXIuQmlu
bmVySW5uZXI8VEo7PjtcbiIgKyANCisJCSIgIC8vIFN0YWNrOiAzLCBMb2NhbHM6IDFcbiIgKyAN
CisJCSIgIHB1YmxpYyBYLkJpbm5lci5CaW5uZXJJbm5lciAkbmV3JCgpO1xuIiArIA0KKwkJIiAg
ICAgMCAgbmV3IFgkQmlubmVyJEJpbm5lcklubmVyIFsxXVxuIiArIA0KKwkJIiAgICAgMyAgZHVw
XG4iICsgDQorCQkiICAgICA0ICBhbG9hZF8wIFt0aGlzXVxuIiArIA0KKwkJIiAgICAgNSAgZ2V0
ZmllbGQgWCRCaW5uZXIkQmlubmVySW5uZXIudGhpcyQxIDogWC5CaW5uZXIgWzEwXVxuIiArIA0K
KwkJIiAgICAgOCAgaW52b2tlc3BlY2lhbCBYJEJpbm5lciRCaW5uZXJJbm5lcihYJEJpbm5lcikg
WzI1XVxuIiArIA0KKwkJIiAgICAxMSAgYXJldHVyblxuIiArIA0KKwkJIiAgICAgIExpbmUgbnVt
YmVyczpcbiIgKyANCisJCSIgICAgICAgIFtwYzogMCwgbGluZTogN11cbiIgKyANCisJCSIgICAg
ICBMb2NhbCB2YXJpYWJsZSB0YWJsZTpcbiIgKyANCisJCSIgICAgICAgIFtwYzogMCwgcGM6IDEy
XSBsb2NhbDogdGhpcyBpbmRleDogMCB0eXBlOiBYLkJpbm5lci5CaW5uZXJJbm5lclxuIiArIA0K
KwkJIiAgICAgIExvY2FsIHZhcmlhYmxlIHR5cGUgdGFibGU6XG4iICsgDQorCQkiICAgICAgICBb
cGM6IDAsIHBjOiAxMl0gbG9jYWw6IHRoaXMgaW5kZXg6IDAgdHlwZTogWDxVPi5CaW5uZXIuQmlu
bmVySW5uZXI8ST5cbiI7DQorCQ0KKwl0cnkgew0KKwkJRmlsZSBmID0gbmV3IEZpbGUoT1VUUFVU
X0RJUiArIEZpbGUuc2VwYXJhdG9yICsgIlgkQklubmVyJEJJbm5lcklubmVyLmNsYXNzIik7DQor
CQlieXRlW10gY2xhc3NGaWxlQnl0ZXMgPSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIudXRpbC5VdGlsLmdldEZpbGVCeXRlQ29udGVudChmKTsNCisJCUNsYXNzRmlsZUJ5dGVzRGlz
YXNzZW1ibGVyIGRpc2Fzc2VtYmxlciA9IFRvb2xGYWN0b3J5LmNyZWF0ZURlZmF1bHRDbGFzc0Zp
bGVCeXRlc0Rpc2Fzc2VtYmxlcigpOw0KKwkJU3RyaW5nIHJlc3VsdCA9IGRpc2Fzc2VtYmxlci5k
aXNhc3NlbWJsZShjbGFzc0ZpbGVCeXRlcywgIlxuIiwgQ2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJs
ZXIuREVUQUlMRUQpOw0KKwkJaW50IGluZGV4ID0gcmVzdWx0LmluZGV4T2YoZXhwZWN0ZWRPdXRw
dXQpOw0KKwkJaWYgKGluZGV4ID09IC0xIHx8IGV4cGVjdGVkT3V0cHV0Lmxlbmd0aCgpID09IDAp
IHsNCisJCQlTeXN0ZW0ub3V0LnByaW50bG4oVXRpbC5kaXNwbGF5U3RyaW5nKHJlc3VsdCwgMykp
Ow0KKwkJfQ0KKwkJaWYgKGluZGV4ID09IC0xKSB7DQorCQkJYXNzZXJ0RXF1YWxzKCJXcm9uZyBj
b250ZW50cyIsIGV4cGVjdGVkT3V0cHV0LCByZXN1bHQpOw0KKwkJfQ0KKwl9IGNhdGNoIChvcmcu
ZWNsaXBzZS5qZHQuY29yZS51dGlsLkNsYXNzRm9ybWF0RXhjZXB0aW9uIGUpIHsNCisJCWFzc2Vy
dFRydWUoZmFsc2UpOw0KKwl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7DQorCQlhc3NlcnRUcnVl
KGZhbHNlKTsNCisJfQkJCQ0KK30NCisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD0yMTQ5NzIgLSB2YXJpYXRpb24NCitwdWJsaWMgdm9pZCB0ZXN0MTIyOSgp
IHsNCisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoDQorCQluZXcgU3RyaW5nW10gew0KKwkJCSJYLmph
dmEiLA0KKwkJCSJwdWJsaWMgY2xhc3MgWDxVIGV4dGVuZHMgQ2xhc3M+IHtcbiIgKyANCisJCQki
CXB1YmxpYyA8WT4gWChZIGIxLCBVIGIyKSB7XG4iICsgDQorCQkJIgl9XG4iICsgDQorCQkJIglw
dWJsaWMgY2xhc3MgQmlubmVyIHtcbiIgKyANCisJCQkiCQlwdWJsaWMgY2xhc3MgQmlubmVySW5u
ZXI8ST4ge1xuIiArIA0KKwkJCSIJCQlwdWJsaWMgPEo+IEJpbm5lcklubmVyPEo+ICRuZXckKCkg
e1xuIiArIA0KKwkJCSIJCQkJcmV0dXJuIG5ldyBCaW5uZXJJbm5lcjxKPigpO1xuIiArIA0KKwkJ
CSIJCQl9XG4iICsgDQorCQkJIgkJCVg8VT4gcm9vdCgpIHtcbiIgKyANCisJCQkiCQkJCXJldHVy
biBYLnRoaXM7XG4iICsgDQorCQkJIgkJCX1cbiIgKyANCisJCQkiCQl9XG4iICsgDQorCQkJIgl9
XG4iICsgDQorCQkJIn1cbiIsDQorCQkJIlouamF2YSIsDQorCQkJInB1YmxpYyBjbGFzcyBaIHtc
biIgKyANCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIg
KyANCisJCQkiCQlYPENsYXNzPi5CaW5uZXIuQmlubmVySW5uZXI8U3RyaW5nPiBiaW5TdHJpbmcg
PSBuZXcgWDxDbGFzcz4obnVsbCwgbnVsbCkubmV3IEJpbm5lcigpLm5ldyBCaW5uZXJJbm5lcjxT
dHJpbmc+KCk7XG4iICsgDQorCQkJIgkJU3RyaW5nIHMgPSBiaW5TdHJpbmcuJG5ldyQoKS5yb290
KCk7XG4iICsgDQorCQkJIgl9XG4iICsgDQorCQkJIn1cbiIJCQkNCisJCX0sDQorCQkiLS0tLS0t
LS0tLVxuIiArIA0KKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEpXG4iICsgDQor
CQkiCXB1YmxpYyBjbGFzcyBYPFUgZXh0ZW5kcyBDbGFzcz4ge1xuIiArIA0KKwkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgXl5eXl5cbiIgKyANCisJCSJDbGFzcyBpcyBhIHJhdyB0eXBlLiBS
ZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBDbGFzczxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXpl
ZFxuIiArIA0KKwkJIi0tLS0tLS0tLS1cbiIgKyANCisJCSIyLiBXQVJOSU5HIGluIFguamF2YSAo
YXQgbGluZSAxKVxuIiArIA0KKwkJIglwdWJsaWMgY2xhc3MgWDxVIGV4dGVuZHMgQ2xhc3M+IHtc
biIgKyANCisJCSIJICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXG4iICsgDQorCQkiVGhl
IHR5cGUgcGFyYW1ldGVyIFUgc2hvdWxkIG5vdCBiZSBib3VuZGVkIGJ5IHRoZSBmaW5hbCB0eXBl
IENsYXNzLiBGaW5hbCB0eXBlcyBjYW5ub3QgYmUgZnVydGhlciBleHRlbmRlZFxuIiArIA0KKwkJ
Ii0tLS0tLS0tLS1cbiIgKyANCisJCSItLS0tLS0tLS0tXG4iICsgDQorCQkiMS4gV0FSTklORyBp
biBaLmphdmEgKGF0IGxpbmUgMylcbiIgKyANCisJCSIJWDxDbGFzcz4uQmlubmVyLkJpbm5lcklu
bmVyPFN0cmluZz4gYmluU3RyaW5nID0gbmV3IFg8Q2xhc3M+KG51bGwsIG51bGwpLm5ldyBCaW5u
ZXIoKS5uZXcgQmlubmVySW5uZXI8U3RyaW5nPigpO1xuIiArIA0KKwkJIgkgIF5eXl5eXG4iICsg
DQorCQkiQ2xhc3MgaXMgYSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgQ2xh
c3M8VD4gc2hvdWxkIGJlIHBhcmFtZXRlcml6ZWRcbiIgKyANCisJCSItLS0tLS0tLS0tXG4iICsg
DQorCQkiMi4gV0FSTklORyBpbiBaLmphdmEgKGF0IGxpbmUgMylcbiIgKyANCisJCSIJWDxDbGFz
cz4uQmlubmVyLkJpbm5lcklubmVyPFN0cmluZz4gYmluU3RyaW5nID0gbmV3IFg8Q2xhc3M+KG51
bGwsIG51bGwpLm5ldyBCaW5uZXIoKS5uZXcgQmlubmVySW5uZXI8U3RyaW5nPigpO1xuIiArIA0K
KwkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICBeXl5eXlxuIiArIA0KKwkJIkNsYXNzIGlzIGEgcmF3IHR5cGUuIFJlZmVyZW5jZXMgdG8gZ2Vu
ZXJpYyB0eXBlIENsYXNzPFQ+IHNob3VsZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgDQorCQkiLS0t
LS0tLS0tLVxuIiArIA0KKwkJIjMuIEVSUk9SIGluIFouamF2YSAoYXQgbGluZSA0KVxuIiArIA0K
KwkJIglTdHJpbmcgcyA9IGJpblN0cmluZy4kbmV3JCgpLnJvb3QoKTtcbiIgKyANCisJCSIJICAg
ICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyANCisJCSJUeXBlIG1pc21hdGNo
OiBjYW5ub3QgY29udmVydCBmcm9tIFg8Q2xhc3M+IHRvIFN0cmluZ1xuIiArIA0KKwkJIi0tLS0t
LS0tLS1cbiIpOw0KK30NCisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD0yMTQ5NzIgLSB2YXJpYXRpb24NCitwdWJsaWMgdm9pZCB0ZXN0MTIzMCgpIHsNCisJ
dGhpcy5ydW5Db25mb3JtVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJIlguamF2YSIsDQor
CQkJInB1YmxpYyBjbGFzcyBYPFUgZXh0ZW5kcyBDbGFzcz4ge1xuIiArIA0KKwkJCSIJcHVibGlj
IDxZPiBYKFkgYjEsIFUgYjIpIHtcbiIgKyANCisJCQkiCX1cbiIgKyANCisJCQkiCXB1YmxpYyBj
bGFzcyBCaW5uZXIge1xuIiArIA0KKwkJCSIJCXB1YmxpYyBjbGFzcyBCaW5uZXJJbm5lcjxJPiB7
XG4iICsgDQorCQkJIgkJCXB1YmxpYyA8Sj4gQmlubmVySW5uZXI8Sj4gJG5ldyQoKSB7XG4iICsg
DQorCQkJIgkJCQlyZXR1cm4gbmV3IEJpbm5lcklubmVyPEo+KCk7XG4iICsgDQorCQkJIgkJCX1c
biIgKyANCisJCQkiCQkJWDxVPiByb290KCkge1xuIiArIA0KKwkJCSIJCQkJcmV0dXJuIFgudGhp
cztcbiIgKyANCisJCQkiCQkJfVxuIiArIA0KKwkJCSIJCX1cbiIgKyANCisJCQkiCX1cbiIgKyAN
CisJCQkifVxuIiwNCisJCX0sDQorCQkiIik7DQorCXRoaXMucnVuTmVnYXRpdmVUZXN0KA0KKwkJ
CW5ldyBTdHJpbmdbXSB7DQorCQkJCSJaLmphdmEiLA0KKwkJCQkicHVibGljIGNsYXNzIFoge1xu
IiArIA0KKwkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIg
KyANCisJCQkJIgkJWDxDbGFzcz4uQmlubmVyLkJpbm5lcklubmVyPFN0cmluZz4gYmluU3RyaW5n
ID0gbmV3IFg8Q2xhc3M+KG51bGwsIG51bGwpLm5ldyBCaW5uZXIoKS5uZXcgQmlubmVySW5uZXI8
U3RyaW5nPigpO1xuIiArIA0KKwkJCQkiCQlTdHJpbmcgcyA9IGJpblN0cmluZy4kbmV3JCgpLnJv
b3QoKTtcbiIgKyANCisJCQkJIgl9XG4iICsgDQorCQkJCSJ9XG4iCQkJDQorCQkJfSwNCisJCQki
LS0tLS0tLS0tLVxuIiArIA0KKwkJCSIxLiBXQVJOSU5HIGluIFouamF2YSAoYXQgbGluZSAzKVxu
IiArIA0KKwkJCSIJWDxDbGFzcz4uQmlubmVyLkJpbm5lcklubmVyPFN0cmluZz4gYmluU3RyaW5n
ID0gbmV3IFg8Q2xhc3M+KG51bGwsIG51bGwpLm5ldyBCaW5uZXIoKS5uZXcgQmlubmVySW5uZXI8
U3RyaW5nPigpO1xuIiArIA0KKwkJCSIJICBeXl5eXlxuIiArIA0KKwkJCSJDbGFzcyBpcyBhIHJh
dyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBDbGFzczxUPiBzaG91bGQgYmUgcGFy
YW1ldGVyaXplZFxuIiArIA0KKwkJCSItLS0tLS0tLS0tXG4iICsgDQorCQkJIjIuIFdBUk5JTkcg
aW4gWi5qYXZhIChhdCBsaW5lIDMpXG4iICsgDQorCQkJIglYPENsYXNzPi5CaW5uZXIuQmlubmVy
SW5uZXI8U3RyaW5nPiBiaW5TdHJpbmcgPSBuZXcgWDxDbGFzcz4obnVsbCwgbnVsbCkubmV3IEJp
bm5lcigpLm5ldyBCaW5uZXJJbm5lcjxTdHJpbmc+KCk7XG4iICsgDQorCQkJIgkgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXlxuIiArIA0K
KwkJCSJDbGFzcyBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBDbGFz
czxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxuIiArIA0KKwkJCSItLS0tLS0tLS0tXG4iICsg
DQorCQkJIjMuIEVSUk9SIGluIFouamF2YSAoYXQgbGluZSA0KVxuIiArIA0KKwkJCSIJU3RyaW5n
IHMgPSBiaW5TdHJpbmcuJG5ldyQoKS5yb290KCk7XG4iICsgDQorCQkJIgkgICAgICAgICAgIF5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIA0KKwkJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3Qg
Y29udmVydCBmcm9tIFg8Q2xhc3M+IHRvIFN0cmluZ1xuIiArIA0KKwkJCSItLS0tLS0tLS0tXG4i
LA0KKwkJCW51bGwsDQorCQkJZmFsc2UsDQorCQkJbnVsbCk7CQkNCit9DQorLy9odHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjE0OTcyIC0gdmFyaWF0aW9uDQor
cHVibGljIHZvaWQgdGVzdDEyMzEoKSB7DQorCXRoaXMucnVuQ29uZm9ybVRlc3QoDQorCQluZXcg
U3RyaW5nW10gew0KKwkJCSJYLmphdmEiLA0KKwkJCSJwdWJsaWMgY2xhc3MgWDxVIGV4dGVuZHMg
Q2xhc3M+IHtcbiIgKyANCisJCQkiCXB1YmxpYyA8WT4gWChZIGIxLCBVIGIyKSB7XG4iICsgDQor
CQkJIgl9XG4iICsgDQorCQkJIglwdWJsaWMgY2xhc3MgQmlubmVyIHtcbiIgKyANCisJCQkiCQlw
dWJsaWMgY2xhc3MgQmlubmVySW5uZXI8ST4ge1xuIiArIA0KKwkJCSIJCQlwdWJsaWMgPEo+IEJp
bm5lcklubmVyPEo+ICRuZXckKCkge1xuIiArIA0KKwkJCSIJCQkJcmV0dXJuIG5ldyBCaW5uZXJJ
bm5lcjxKPigpO1xuIiArIA0KKwkJCSIJCQl9XG4iICsgDQorCQkJIgkJCVg8VT4gcm9vdCgpIHtc
biIgKyANCisJCQkiCQkJCXJldHVybiBYLnRoaXM7XG4iICsgDQorCQkJIgkJCX1cbiIgKyANCisJ
CQkiCQl9XG4iICsgDQorCQkJIgl9XG4iICsgDQorCQkJIn1cbiIsDQorCQl9LA0KKwkJIiIpOw0K
Kwl0aGlzLnJ1bkNvbmZvcm1UZXN0KA0KKwkJCW5ldyBTdHJpbmdbXSB7DQorCQkJCSJaLmphdmEi
LA0KKwkJCQkicHVibGljIGNsYXNzIFoge1xuIiArIA0KKwkJCQkiCXB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyANCisJCQkJIgkJWDxDbGFzcz4uQmlubmVyLkJp
bm5lcklubmVyPFN0cmluZz4gYmluU3RyaW5nID0gbmV3IFg8Q2xhc3M+KG51bGwsIG51bGwpLm5l
dyBCaW5uZXIoKS5uZXcgQmlubmVySW5uZXI8U3RyaW5nPigpO1xuIiArIA0KKwkJCQkiCQlYPENs
YXNzPi5CaW5uZXIuQmlubmVySW5uZXI8TnVtYmVyPiBiaW5OdW1iZXIgPSBiaW5TdHJpbmcuJG5l
dyQoKTtcbiIgKw0KKwkJCQkiCX1cbiIgKyANCisJCQkJIn1cbiIJCQkNCisJCQl9LA0KKwkJCSIi
LA0KKwkJCW51bGwsDQorCQkJZmFsc2UsDQorCQkJbnVsbCk7CQkNCit9DQogfQ0K
</data>

          </attachment>
      

    </bug>

</bugzilla>