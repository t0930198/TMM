<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.1"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>214253</bug_id>
          
          <creation_ts>2008-01-03 12:39:00 -0500</creation_ts>
          <short_desc>@target() results in java.lang.VerifyError</short_desc>
          <delta_ts>2008-08-21 14:28:05 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>4</classification_id>
          <classification>Tools</classification>
          <product>AspectJ</product>
          <component>Compiler</component>
          <version>unspecified</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WORKSFORME</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.6.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Nathaniel Stoddard">nathaniel.stoddard</reporter>
          <assigned_to name="aspectj inbox">aspectj-inbox</assigned_to>
          <cc>aclement</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1125083</commentid>
    <comment_count>0</comment_count>
    <who name="Nathaniel Stoddard">nathaniel.stoddard</who>
    <bug_when>2008-01-03 12:39:29 -0500</bug_when>
    <thetext>Whenever I define a pointcut that uses the @target(com.sample.MyAnnotation), a VerifyError gets thrown when the class is loaded.  This is via compile-time weaving, not load-time.  The error doesn&apos;t get thrown if I convert the pointcut to use a target() instead of @target().

Stacktrace includes the message &quot;Illegal type in constant pool&quot;.

The class in question was part of the inpath -- so not sure if that&apos;s relevant or not.  I&apos;m compiling and executing on Sun&apos;s JDK 1.5.0_06.  Currently, doing weaving using AspectJ &quot;development build&quot;, but also got error on 1.5.3 and 1.5.4 (not sure of exact versions, e.g. RC1 or not, just downloaded from website).

after(RequestContext context, DataBinder binder) returning : @target(MyAnnotation) &amp;&amp; execution(void FormAction.doBind(RequestContext, DataBinder)) &amp;&amp; args(context, binder) { .... }</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1161997</commentid>
    <comment_count>1</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2008-02-21 20:30:39 -0500</bug_when>
    <thetext>I am trying to recreate this, but having trouble.  Any idea what might be different between my scenario and yours?


----8&lt;----- A.java
package a.b.c;
import java.lang.annotation.*;
import org.aspectj.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
public @interface A {}
----8&lt;-----

----8&lt;----- Code.java
package e;
import java.lang.annotation.*;
import org.aspectj.lang.annotation.*;

public class Code {

  @a.b.c.A
  public void m() {}

  public static void main(String []argv) {
    new Code().m();
  }
}
----8&lt;-----

----8&lt;----- X.java
package e;
import java.lang.annotation.*;
import org.aspectj.lang.annotation.*;

import a.b.c.A;

aspect X {
  after() returning: @target(a.b.c.A) &amp;&amp; execution(* m(..)) { }
}

----8&lt;-----

Compile the annotation and aspect:
&gt; ajc -d bin1 A.java X.java -1.5
/Users/aclement/bugs/X.java:8 [warning] advice defined in e.X has not been applied [Xlint:adviceDidNotMatch]

Compile the Code applying the aspect from the inpath:
&gt; ajc Code.java -d bin2 -inpath bin1 -1.5 -showWeaveInfo
Join point &apos;method-execution(void e.Code.m())&apos; in Type &apos;e.Code&apos; (Code.java:9) advised by afterReturning advice from &apos;e.X&apos; (X.java:8) [with runtime test]

Run it:
&gt; java e.Code

and it runs OK.  I am willing to believe there is a problem here because I&apos;ve had similar ones in the past - sometimes to do with a type not correctly maintaining its package prefix when put into the constant pool for the class (that&apos;s why I tried my test source files in different packages).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1316905</commentid>
    <comment_count>2</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2008-08-21 14:28:05 -0400</bug_when>
    <thetext>Not heard back about the difference between my testcode and the failing scenario.  Given that this was raised in January and we&apos;ve had around 100 fixes go in since then (including numerous annotation style fixes) - I&apos;m closing this, please reopen if it is still an issue for you.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>