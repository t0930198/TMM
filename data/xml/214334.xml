<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.1"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>214334</bug_id>
          
          <creation_ts>2008-01-04 06:24:00 -0500</creation_ts>
          <short_desc>[Refactoring] Modelling transformations on the AST</short_desc>
          <delta_ts>2014-01-29 20:45:23 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>4</classification_id>
          <classification>Tools</classification>
          <product>CDT</product>
          <component>cdt-core</component>
          <version>5.0</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>5.0 M6</target_milestone>
          
          <blocked>181493</blocked>
    
    <blocked>214605</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Schorn">markus.schorn</reporter>
          <assigned_to name="Markus Schorn">markus.schorn</assigned_to>
          <cc>anton.leherbauer</cc>
    
    <cc>beth</cc>
    
    <cc>dan.podwall</cc>
    
    <cc>dschaefer</cc>
    
    <cc>dsciamma</cc>
    
    <cc>eclipse.sprigogin</cc>
    
    <cc>ed.swartz</cc>
    
    <cc>emanuel</cc>
    
    <cc>g1zgragg</cc>
    
    <cc>me</cc>
    
    <cc>mikekucera</cc>
    
    <cc>peter.sommerlad</cc>
    
    <cc>ronbermejo</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1125624</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Schorn">markus.schorn</who>
    <bug_when>2008-01-04 06:24:03 -0500</bug_when>
    <thetext>In multiple bugs I claimed that we need a common infrastructure to base C/C++ refactorings on. (bug 179391, bug 181493).
I have been discussing this in detail with Peter Sommerlad and his team and we came up with the following suggestion:

To implement a new refactoring it should be sufficient to describe the transformations the refactoring needs to perform on the AST. With such a
description CDT shall than be able to create the &apos;org.eclipse.ltk.core.refactoring.Change&apos; object as needed by the refactoring framework. Note, that the transformation to the AST will only be described, but is never actually carried out, i.e. the original AST remains to be unmodified.

This bug shall deal with modelling the description of transformations on an AST-Tree. There will be a separate bug dealing with converting this description into the actual Change object.

(1) A transformation is a sequence of modifications to an AST-Tree.
(2) A modification is either
   (a) ASTRemoval: the removal of a subtree
   (b) ASTInsertion: the insertion of a subtree
   (c) ASTTextInserion: the insertion of text (e.g. comment)
(3) An ASTInsertion can contain a sequence of modifications that are applied
    to the subtree that is being inserted.
(4) A subtree being inserted can either be part of an ASTTranslationUnit as it
    is generated by a parser, or it can be a &apos;synthetic&apos; tree that has been 
    generated by the refactoring. While the transformation allows to mix regular
    and synthetic AST, a synthetic AST-Tree itself must not refer to any 
    regular AST via the parent-child relationship of its ASTNodes.

To enable discussions I&apos;ll try to come up with a set of interfaces providing this functionality as soon as possible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1125780</commentid>
    <comment_count>1</comment_count>
    <who name="Mike Kucera">mikekucera</who>
    <bug_when>2008-01-04 10:18:39 -0500</bug_when>
    <thetext>(In reply to comment #0)

This sounds like a very interesting proposal, I&apos;m excited to see how its going to work.

A couple questions:

1) Will this require any changes to the AST node interfaces? From your description it sounds like it won&apos;t.
2) How are you going to deal with the preprocessor? To me this sounds like the hardest part by far. 

Also, could you please provide links to supporting material such as papers, design docs or articles if they are available. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1125847</commentid>
    <comment_count>2</comment_count>
    <who name="Ed Swartz">ed.swartz</who>
    <bug_when>2008-01-04 11:39:04 -0500</bug_when>
    <thetext>(In reply to comment #0)
Are removal and insertion sufficient?  I would propose a &quot;replace&quot; operation as well, for swapping out subtrees.  In the current list of operations, for example, an operation like replacing literals with variables would always require a removal followed by an insertion, which seems onerous.  It&apos;s a bit difficult to recommend a client do something like removing and then inserting a structurally required child (e.g. the child of a unary expression).

Similarly, text insertion isn&apos;t sufficient.  I can imagine refactorings that remove or modify comments (e.g. for Doxygen processing, like renaming parameters) as well.  Also, operations like factoring an expression into a macro call could replace an expression with text.  Perhaps for text, a simple operation -- ASTTextReplace -- can be provided, which maps to a ReplaceEdit.

(In reply to comment #1)
Finally, where text edits come into play, and echoing Mike&apos;s comment, it&apos;s important to clarify the way text positions are represented.  Will these be specified relative to an AST node (e.g. &quot;add text after this node&quot; or &quot;replace this node with text&quot;) or would it use offsets and lengths?  If the latter, which: those in the IASTNodeLocation, or those used in the physical file?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1126486</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Schorn">markus.schorn</who>
    <bug_when>2008-01-07 07:57:01 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; ...
&gt; 1) Will this require any changes to the AST node interfaces? From your
&gt; description it sounds like it won&apos;t.
At this point I am not aware of any.

&gt; Also, could you please provide links to supporting material such as papers,
&gt; design docs or articles if they are available. Thanks.
I don&apos;t have such material. 
 
&gt; 2) How are you going to deal with the preprocessor? To me this sounds like the
&gt; hardest part by far. 

There are different parts to the preprocessor:
(a) existing preprocessor directives + macro expansions:
The rewriter based on the transformation will be responsible for preserving the original code. This is possible whereever regular AST is used (as opposed to synthetic AST). The refactorings themselves are responsible for preventing transformations that would break the preprocessor (e.g. deleting a single #endif, etc.)
(b) generated preprocessing directives:
There are two options. The API could allow for inserting preprocessing nodes (they implement IASTNode). You can also use ASTTextInsertion to add preprocessing directives. The initial version of the transformations will probably support the latter, only.
(c) modifying a preprocessing directive:
At some point it may be necessary to modify existing preprocessing nodes. This is a bit different, because the preprocessing nodes themselves are not structured using child nodes. Nevertheless, a mechanism to define such transformations could be integrated here (with additional API). The first version of the ast transformation will probably not support that. 


</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1126490</commentid>
    <comment_count>4</comment_count>
    <who name="Markus Schorn">markus.schorn</who>
    <bug_when>2008-01-07 08:03:48 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; Are removal and insertion sufficient?  I would propose a &quot;replace&quot; operation as
&gt; well, for swapping out subtrees.  
It is sufficient to model the transformation. The API to build such a transformation should certainly support a replacement (and model it as a remove/insert).

&gt; Similarly, text insertion isn&apos;t sufficient.  I can imagine refactorings that
&gt; remove or modify comments (e.g. for Doxygen processing, like renaming
&gt; parameters) as well.  
See my previous comment. The initial version will probably not support that.

&gt; Also, operations like factoring an expression into a
&gt; macro call could replace an expression with text.  Perhaps for text, a simple
&gt; operation -- ASTTextReplace -- can be provided, which maps to a ReplaceEdit.
Replacing a node with text can be modelled. 

&gt; (In reply to comment #1)
&gt; Finally, where text edits come into play, and echoing Mike&apos;s comment, it&apos;s
&gt; important to clarify the way text positions are represented...
Transformations will be based on nodes, only. Using positions would become 
very confusing and hard to use. When it comes to changing comments or preprocessing nodes, we will probably have to use offsets relative to the start
of a comment/directive.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1128102</commentid>
    <comment_count>5</comment_count>
    <who name="Markus Schorn">markus.schorn</who>
    <bug_when>2008-01-09 09:42:55 -0500</bug_when>
    <thetext>I have commited an initial proposal for the API to CVS. Have a look at
org.eclipse.cdt.core.dom.rewrite.ASTRewrite, I am looking for feedback.

Different to comment #0 I modelled text insertion via an artifical IASTNode. This idea is stolen from JDT.

I will continue to discuss the implementation side of this in bug 214605. The start of this can be found in the package org.eclipse.cdt.internal.core.dom.rewrite
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1130555</commentid>
    <comment_count>6</comment_count>
      <attachid>86818</attachid>
    <who name="Emanuel Graf">emanuel</who>
    <bug_when>2008-01-14 08:12:23 -0500</bug_when>
    <thetext>Created attachment 86818
NPE save implementation of ASTModificationMap.getModificationsForNode()

Markus, If a ASTModificationMap contains no modifications for a given node then ASTModificationMap.getModificationsForNode() throws a NPE. I think the best solution would be to return an empty List.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1130691</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Schorn">markus.schorn</who>
    <bug_when>2008-01-14 10:49:05 -0500</bug_when>
    <thetext>(In reply to comment #6)
Thanks, I have changed the API contract + implementation as you suggested.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1175833</commentid>
    <comment_count>8</comment_count>
    <who name="Markus Schorn">markus.schorn</who>
    <bug_when>2008-03-12 06:35:03 -0400</bug_when>
    <thetext>We have an initial version that is sufficient for the SourceChangeGenerator. We can deal with addtional feature requests in separate bugzillas.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>86818</attachid>
            <date>2008-01-14 08:12:00 -0500</date>
            <delta_ts>2014-01-29 20:45:23 -0500</delta_ts>
            <desc>NPE save implementation of ASTModificationMap.getModificationsForNode()</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>1331</size>
            <attacher name="Emanuel Graf">emanuel</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5jZHQuY29yZQpJ
bmRleDogcGFyc2VyL29yZy9lY2xpcHNlL2NkdC9pbnRlcm5hbC9jb3JlL2RvbS9yZXdyaXRlL0FT
VE1vZGlmaWNhdGlvbk1hcC5qYXZhCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KUkNTIGZpbGU6IC9jdnNyb290L3Rvb2xz
L29yZy5lY2xpcHNlLmNkdC1yZWxlbmcvYWxsL29yZy5lY2xpcHNlLmNkdC5jb3JlL3BhcnNlci9v
cmcvZWNsaXBzZS9jZHQvaW50ZXJuYWwvY29yZS9kb20vcmV3cml0ZS9BU1RNb2RpZmljYXRpb25N
YXAuamF2YSx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS4xCmRpZmYgLXUgLXIxLjEgQVNUTW9kaWZp
Y2F0aW9uTWFwLmphdmEKLS0tIHBhcnNlci9vcmcvZWNsaXBzZS9jZHQvaW50ZXJuYWwvY29yZS9k
b20vcmV3cml0ZS9BU1RNb2RpZmljYXRpb25NYXAuamF2YQk5IEphbiAyMDA4IDE0OjM3OjE5IC0w
MDAwCTEuMQorKysgcGFyc2VyL29yZy9lY2xpcHNlL2NkdC9pbnRlcm5hbC9jb3JlL2RvbS9yZXdy
aXRlL0FTVE1vZGlmaWNhdGlvbk1hcC5qYXZhCTE0IEphbiAyMDA4IDEzOjEwOjM1IC0wMDAwCkBA
IC0yOSw2ICsyOSw3IEBACiAgKi8KIHB1YmxpYyBjbGFzcyBBU1RNb2RpZmljYXRpb25NYXAgewog
CQorCXByaXZhdGUgc3RhdGljIGZpbmFsIEFycmF5TGlzdDxBU1RNb2RpZmljYXRpb24+IEVNUFRZ
X01PRElGSUNBVElPTl9MSVNUID0gbmV3IEFycmF5TGlzdDxBU1RNb2RpZmljYXRpb24+KDApOwog
CXByaXZhdGUgSGFzaE1hcDxJQVNUTm9kZSxMaXN0PEFTVE1vZGlmaWNhdGlvbj4+IGZNb2RpZmlj
YXRpb25zPSBuZXcgSGFzaE1hcDxJQVNUTm9kZSxMaXN0PEFTVE1vZGlmaWNhdGlvbj4+KCk7CiAK
IAkvKioKQEAgLTc2LDcgKzc3LDExIEBACiAJICogQHJldHVybiB0aGUgbW9kaWZpY2F0aW9uIGxp
c3Qgb3IgPGNvZGU+bnVsbDwvY29kZT4uCiAJICovCiAJcHVibGljIExpc3Q8QVNUTW9kaWZpY2F0
aW9uPiBnZXRNb2RpZmljYXRpb25zRm9yTm9kZShJQVNUTm9kZSBub2RlKSB7Ci0JCXJldHVybiBD
b2xsZWN0aW9ucy51bm1vZGlmaWFibGVMaXN0KGZNb2RpZmljYXRpb25zLmdldChub2RlKSk7CisJ
CUxpc3Q8QVNUTW9kaWZpY2F0aW9uPiBtb2RMaXN0ID0gZk1vZGlmaWNhdGlvbnMuZ2V0KG5vZGUp
OworCQlpZiAobW9kTGlzdCA9PSBudWxsKSB7CisJCQltb2RMaXN0ID0gRU1QVFlfTU9ESUZJQ0FU
SU9OX0xJU1Q7CisJCX0KKwkJcmV0dXJuIENvbGxlY3Rpb25zLnVubW9kaWZpYWJsZUxpc3QobW9k
TGlzdCk7CiAJfQogCQogCS8qKgo=
</data>
<flag name="iplog"
          id="60953"
          type_id="7"
          status="+"
          setter="dschaefer"
    />
          </attachment>
      

    </bug>

</bugzilla>