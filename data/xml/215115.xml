<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.1"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>215115</bug_id>
          
          <creation_ts>2008-01-12 11:28:00 -0500</creation_ts>
          <short_desc>[ataspectj] [decp] Can&apos;t advice introduced method with annotation-style</short_desc>
          <delta_ts>2013-06-24 11:07:13 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>4</classification_id>
          <classification>Tools</classification>
          <product>AspectJ</product>
          <component>LTWeaving</component>
          <version>1.5.4RC1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Carlos Pita">carlosjosepita</reporter>
          <assigned_to name="aspectj inbox">aspectj-inbox</assigned_to>
          <cc>aclement</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1130166</commentid>
    <comment_count>0</comment_count>
    <who name="Carlos Pita">carlosjosepita</who>
    <bug_when>2008-01-12 11:28:44 -0500</bug_when>
    <thetext>Instead what is adviced is the introduced object (maybe a delegate?). Take for example the following aspect, which is intended to after advice deserialization of objects annotated with @Injected. For this, the aspect introduces the method DeserializationSupport.readResolve() and makes the adviced class implements Serializable. readResolve() is part of the deserialization protocol, and will be invoked by the java rt during deserialization if it&apos;s there. 

@Aspect
public class InjectorAspect {

    @After(&quot;execution(* framework.injection.InjectorAspect.DeserializationSupport.readResolve()) &amp;&amp; this(injected)&quot;)
    public void afterDeserialization(Object injected, JoinPoint jp) {
       // I get a DeserializationSupportImpl instance here :(
    }
    
    @DeclareParents(value=&quot;@framework.injection.Injected java.io.Serializable+&quot;, defaultImpl=DeserializationSupportImpl.class)
    private DeserializationSupport deserializationSupport;
    
    public interface DeserializationSupport extends Serializable {
        public Object readResolve() throws ObjectStreamException;
    }
    
    @SuppressWarnings(&quot;serial&quot;)
    public static class DeserializationSupportImpl implements DeserializationSupport {
        public Object readResolve() throws ObjectStreamException {
            return this;
        }
    }
}

What are really being intercepted are instances looking like framework.injection.InjectorAspect$DeserializationSupportImpl@b16f5f. These are not instances of the expected @Injected at all! Even if I relaxed to advice pointcut to: &quot;execution(* *.readResolve()) &amp;&amp; this(injected)&quot;, the only intercepted instances would still be DeserializationSupportImpl ones, never @Injected objects.

But then, rewriting the aspect in aj-style, makes it work as pretended

public aspect InjectorAspect {

    after(Object injected) :
        execution(Object DeserializationSupport+.readResolve() throws ObjectStreamException) &amp;&amp; @this(Injected) &amp;&amp; this(injected) {
       // I get an @Intected instance here :) !
    }
    
    declare parents: @Injected Serializable+ implements DeserializationSupport;

    interface DeserializationSupport extends Serializable {
    }

    public Object DeserializationSupport.readResolve() throws ObjectStreamException {
        return this;
    }
}

AFAICS the only difference in the second version is the extra pointcut clause &quot;@this(Injected)&quot;. But of course if I add this clause to the annotation-style version, no joinpoint will be matched, because even the much more permisive &quot;execution(* *.readResolve())&quot; never makes true &quot;@this(Injected)&quot;.

I think this is a bug because it implies there are different semantics for things that -at least from my interpretation of the docs- should be equivalent. Also, a valid use case (advicing introduced method) seems to be outside the scope of annotation-style aspects.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1161991</commentid>
    <comment_count>1</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2008-02-21 20:07:13 -0500</bug_when>
    <thetext>I&apos;m afraid that right now it is the documentation that is incorrect in this case.  Weaving of AspectJ constructs that modify the type system is hard in a pure Java (annotation) style.  A simple code style ITD that the aspectj compiler can easily implement has to be mapped to a mixin style interface/class implementation as you have done - because it has to keep javac happy.

I can imagine I can address this to a degree by advising the delegate method introduced into the target type - but that needs a lot of thought to ensure it is correct in all circumstances.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2276392</commentid>
    <comment_count>2</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2013-06-24 11:07:13 -0400</bug_when>
    <thetext>unsetting the target field which is currently set for something already released</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>